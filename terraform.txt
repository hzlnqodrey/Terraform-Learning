Terraform Block: 
    • The terraform {} block contains Terraform settings
    • For each provider, the source attribute defines an optional hostname, a namespace, and the provider type
    • the google provider's source is defined as hashicorp/google: [https://registry.terraform.io/providers/hashicorp/google/latest]
    • You can also define a version constraint for each provider in the required_providers block. The version attribute is optional, but we recommend using it to enforce the provider version. Without it, Terraform will always use the latest version of the provider, which may introduce breaking changes.

Provides Block:
   • The provider block configures the specified provider, in this case google. A provider is a plugin that Terraform uses to create and manage your resources. You can define multiple provider blocks in a Terraform configuration to manage resources from different providers.

Resource Block:
    • Use resource blocks to define components of your infrastructure. A resource might be a physical component such as a server, or it can be a logical resource such as a Heroku application.

    • Resource blocks have two strings before the block: the resource type and the resource name
        resource type is google_compute_network
        resource name is vpc_network

    • The prefix of the type maps to the name of the provider.
    • Terraform manages the google_compute_network resource with the google provider
    • Example, ID for my network is: google_compute_network.vpc_network
    • Resource blocks contain arguments which you use to configure the resource. Arguments can include things like machine sizes, disk image names, or VPC IDs

INITIALIZE THE DIRECTORY:
    When you create a new configuration — or check out an existing configuration from version control — you need to initialize the directory with terraform init. This step downloads the providers defined in the configuration.
    • terraform init
    • terraform fmt
        automatically updates configurations in the current directory for readability and consistency.
    • terraform validate
        You can also make sure your configuration is syntactically valid and internally consistent

CREATE INFRASTRUCTURE:
    • terraform apply
    You have now created infrastructure using Terraform! Visit the GCP console to see the network you provisioned. Make sure you are looking at the same region and project that you configured in the provider configuration.

INSPECT STATE:
    • When you applied your configuration, Terraform wrote data into a file called terraform.tfstate
    Terraform stores the IDs and properties of the resources it manages in this file, so that it can update or destroy those resources going forward.
    • Inspect the current state using terraform show
